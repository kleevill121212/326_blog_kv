{
  "hash": "8579ac3a9f8a34a8b915802fd762a192",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini Project 4\"\n---\n\n\n\n# Bayesian Analysis\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prior 1\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\ntarget_mean <- 44/66\nalphas <- seq(0.1, 200, length.out = 500)\nbetas <- 0.45 * alphas\nparam_df <- tibble(alphas, betas)\nparam_df <- param_df |> mutate(vars = \n                                 (alphas*betas)/((alphas+betas)^2 * \n                                                   (alphas+betas+1)))\ntarget_var <- 0.05657^2\nparam_df <- param_df |> mutate(dist_to_target = abs(vars - target_var))\nparam_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 500 × 4\n   alphas betas   vars dist_to_target\n    <dbl> <dbl>  <dbl>          <dbl>\n 1  0.1   0.045 0.187          0.184 \n 2  0.501 0.225 0.124          0.121 \n 3  0.901 0.406 0.0928         0.0896\n 4  1.30  0.586 0.0741         0.0709\n 5  1.70  0.766 0.0617         0.0585\n 6  2.10  0.946 0.0529         0.0497\n 7  2.50  1.13  0.0462         0.0430\n 8  2.90  1.31  0.0411         0.0379\n 9  3.30  1.49  0.0370         0.0338\n10  3.71  1.67  0.0336         0.0304\n# ℹ 490 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nparam_df |> filter(dist_to_target == min(dist_to_target))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  alphas betas    vars dist_to_target\n   <dbl> <dbl>   <dbl>          <dbl>\n1   45.4  20.4 0.00320     0.00000468\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n## Prior 2\n\nalphas <- seq(0.1, 2000, length.out = 2000)\nbetas <- (alphas * (1 - 0.75)) / 0.75  \n\ntarget_prob <- 0.10\nprob_less_0.7 <- pbeta(0.7, alphas, betas) \n\ntibble(alphas, betas, prob_less_0.7) |>\n  mutate(close_to_target = abs(prob_less_0.7 - target_prob)) |>\n  filter(close_to_target == min(close_to_target))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  alphas betas prob_less_0.7 close_to_target\n   <dbl> <dbl>         <dbl>           <dbl>\n1   95.1  31.7        0.0999       0.0000722\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\nps <- seq(0, 1, length.out = 1000)\ninformative_alpha_1 <- 45.36\ninformative_beta_1 <- 20.41\ninformative_alpha_2 <- 95.14\ninformative_beta_2 <- 31.71\nnoninformative_alpha <- 1\nnoninformative_beta <- 1\n\ninformative_prior_1 <- dbeta(ps, informative_alpha_1,\ninformative_beta_1)\ninformative_prior_2 <- dbeta(ps, informative_alpha_2,\ninformative_beta_2)\nnoninformative_prior <- dbeta(ps,\nnoninformative_alpha, noninformative_beta)\nprior_plot <- tibble(ps, informative_prior_1, informative_prior_2, noninformative_prior) |>\npivot_longer(2:4, names_to = \"distribution\", values_to = \"density\")\nggplot(data = prior_plot, aes(x = ps, y = density, colour = distribution)) +\ngeom_line() +\nscale_colour_viridis_d(end = 0.9) +\ntheme_minimal() +\nlabs(x = \"p\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\nps <- seq(0, 1, length.out = 1000)\npost_alpha_1 <- 45.36 + 56\npost_beta_1 <- 20.41 + 28\npost_alpha_2 <- 95.14 + 56\npost_beta_2 <- 31.71 + 28\npost_alpha_3 <- 1 + 56\npost_beta_3 <- 1 + 28\n\npost_1 <- dbeta(ps, post_alpha_1,post_beta_1)\npost_2 <- dbeta(ps, post_alpha_2,post_beta_2)\npost_3 <- dbeta(ps, post_alpha_3,post_beta_3)\npost_plot <- tibble(ps, post_1, post_2, post_3) |>\npivot_longer(2:4, names_to = \"distribution\", values_to = \"density\")\nggplot(data = post_plot, aes(x = ps, y = density, colour = distribution)) +\ngeom_line() +\nscale_colour_viridis_d(end = 0.9) +\ntheme_minimal() +\nlabs(x = \"p\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nqbeta(c(0.05,0.95), post_alpha_1,post_beta_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.612770 0.738079\n```\n\n\n:::\n\n```{.r .cell-code}\nqbeta(c(0.05,0.95), post_alpha_2,post_beta_2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6647346 0.7665474\n```\n\n\n:::\n\n```{.r .cell-code}\nqbeta(c(0.05,0.95), post_alpha_3,post_beta_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5772453 0.7440061\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}