{
  "hash": "0c760f84adeae5f2a513c85518d76599",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini Project 1\"\n---\n\n\n\n# Sampling Distribution of the Sample Minimum and Maximum\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\n## Min for Normal\n\nn <- 5 # sample size\nmu <- 10 # population mean\nsigma <- 2 # population standard deviation\ngenerate_samp_min <- function(mu, sigma, n) {single_sample <- rnorm(n, mu, sigma)\nsample_min <- min(single_sample)\nreturn(sample_min)\n}\n## test function once:\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.441205\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000 # number of simulations\n## code to map through the function.\n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    mins\n   <dbl>\n 1  5.30\n 2  9.18\n 3  7.37\n 4 10.4 \n 5  8.39\n 6  9.45\n 7  9.06\n 8  9.95\n 9  8.02\n10  6.26\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = mins_df, aes(x = mins)) +\ngeom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\ntheme_minimal() +\nlabs(x = \"Observed Sample Mins\",\ntitle = paste(\"Sampling Distribution of the \\nSample Min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmins_df |>\nsummarise(min_samp_dist = mean(mins),\nvar_samp_dist = var(mins),\nsd_samp_dist = sd(mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          7.70          1.72         1.31\n```\n\n\n:::\n\n```{.r .cell-code}\n## Max for Normal\n\nn <- 5 # sample size\nmu <- 10 # population mean\nsigma <- 2 # population standard deviation\ngenerate_samp_max <- function(mu, sigma, n) {single_sample <- rnorm(n, mu, sigma)\nsample_max <- max(single_sample)\nreturn(sample_max)\n}\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10.66192\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000 # number of simulations\n## code to map through the function.\n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    maxs\n   <dbl>\n 1  11.9\n 2  12.3\n 3  10.3\n 4  12.7\n 5  14.5\n 6  11.8\n 7  10.3\n 8  13.9\n 9  13.6\n10  12.4\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = maxs_df, aes(x = maxs)) +\ngeom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\ntheme_minimal() +\nlabs(x = \"Observed Sample Maxs\",\ntitle = paste(\"Sampling Distribution of the \\nSample Max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\nmaxs_df |>\nsummarise(min_samp_dist = mean(maxs),\nvar_samp_dist = var(maxs),\nsd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          12.3          1.73         1.31\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n## Min for Uniform\n\nn <- 5 # sample size\ntheta1 <- 7 \ntheta2 <- 13 \nmu = (theta1+theta2)/2\nsigma = sqrt((theta2-theta1)^2 / 12)\ngenerate_samp_min <- function(mu, sigma, n) {single_sample <- runif(n,theta1, theta2)\nsample_min <- min(single_sample)\nreturn(sample_min)\n}\n## test function once:\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7.669392\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000 # number of simulations\n## code to map through the function.\n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    mins\n   <dbl>\n 1  7.86\n 2  8.57\n 3  7.70\n 4  8.19\n 5  7.59\n 6  7.63\n 7  8.05\n 8  9.77\n 9  8.09\n10  7.03\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = mins_df, aes(x = mins)) +\ngeom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\ntheme_minimal() +\nlabs(x = \"Observed Sample Mins\",\ntitle = paste(\"Sampling Distribution of the \\nSample Min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n```{.r .cell-code}\nmins_df |>\nsummarise(min_samp_dist = mean(mins),\nvar_samp_dist = var(mins),\nsd_samp_dist = sd(mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          8.00         0.729        0.854\n```\n\n\n:::\n\n```{.r .cell-code}\n## Max for the Uniform\nlibrary(tidyverse)\n\nn <- 5 # sample size\ntheta1 <- 7 \ntheta2 <- 13 \nmu = (theta1+theta2)/2\nsigma = sqrt((theta2-theta1)^2 / 12)\ngenerate_samp_max <- function(mu, sigma, n) {single_sample <- runif(n,theta1, theta2)\nsample_max <- max(single_sample)\nreturn(sample_max)\n}\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12.65147\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000 # number of simulations\n## code to map through the function.\n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmaxs_df <- tibble(mins)\nmaxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    mins\n   <dbl>\n 1  7.86\n 2  8.57\n 3  7.70\n 4  8.19\n 5  7.59\n 6  7.63\n 7  8.05\n 8  9.77\n 9  8.09\n10  7.03\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = maxs_df, aes(x = maxs)) +\ngeom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\ntheme_minimal() +\nlabs(x = \"Observed Sample Maxs\",\ntitle = paste(\"Sampling Distribution of the \\nSample Max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n\n```{.r .cell-code}\nmaxs_df |>\nsummarise(max_samp_dist = mean(maxs),\nvar_samp_dist = var(maxs),\nsd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  max_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          12.0         0.723        0.850\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n## Min for Exponential\n\nn <- 5 # sample size\nlambda <- 0.5\nmu <- 2 # population mean\nsigma <- 2 # population standard deviation\ngenerate_samp_min <- function(mu, sigma, n) {single_sample <- rexp(n, lambda)\nsample_min <- min(single_sample)\nreturn(sample_min)\n}\n## test function once:\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.04889386\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000 # number of simulations\n## code to map through the function.\n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n     mins\n    <dbl>\n 1 0.678 \n 2 0.541 \n 3 0.280 \n 4 0.0843\n 5 0.172 \n 6 0.112 \n 7 0.148 \n 8 0.393 \n 9 0.0435\n10 0.0112\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = mins_df, aes(x = mins)) +\ngeom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\ntheme_minimal() +\nlabs(x = \"Observed Sample Mins\",\ntitle = paste(\"Sampling Distribution of the \\nSample Min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-5.png){width=672}\n:::\n\n```{.r .cell-code}\nmins_df |>\nsummarise(min_samp_dist = mean(mins),\nvar_samp_dist = var(mins),\nsd_samp_dist = sd(mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1         0.400         0.161        0.401\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n## Max for Exponential\n\nn <- 5 # sample size\nlambda <- 0.5\nmu <- 2 # population mean\nsigma <- 2 # population standard deviation\ngenerate_samp_max <- function(mu, sigma, n) {single_sample <- rexp(n, lambda)\nsample_max <- max(single_sample)\nreturn(sample_max)\n}\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.342965\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000 # number of simulations\n## code to map through the function.\n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmaxs_df <- tibble(maxs)\nmaxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    maxs\n   <dbl>\n 1  2.28\n 2  1.83\n 3  2.94\n 4  3.89\n 5  5.02\n 6  3.98\n 7  5.88\n 8  6.14\n 9  3.63\n10  4.63\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = maxs_df, aes(x = maxs)) +\ngeom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\ntheme_minimal() +\nlabs(x = \"Observed Sample Maxs\",\ntitle = paste(\"Sampling Distribution of the \\nSample Max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-6.png){width=672}\n:::\n\n```{.r .cell-code}\nmaxs_df |>\nsummarise(max_samp_dist = mean(maxs),\nvar_samp_dist = var(maxs),\nsd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  max_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1          4.54          5.82         2.41\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n## Min for Beta\n\nn <- 5 # sample size\nalpha <- 8\nbeta <- 2\nmu <- (alpha / (alpha+beta))\nsigma <- sqrt((alpha * beta)/((alpha+beta)^2 * (alpha+beta+1)))\ngenerate_samp_min <- function(mu, sigma, n) {single_sample <- rbeta(n, alpha, beta)\nsample_min <- min(single_sample)\nreturn(sample_min)\n}\n## test function once:\ngenerate_samp_min(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.5133723\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000 # number of simulations\n## code to map through the function.\n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmins <- map_dbl(1:nsim, \\(i) generate_samp_min(mu = mu, sigma = sigma, n = n))\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmins_df <- tibble(mins)\nmins_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    mins\n   <dbl>\n 1 0.575\n 2 0.547\n 3 0.555\n 4 0.667\n 5 0.690\n 6 0.731\n 7 0.625\n 8 0.574\n 9 0.654\n10 0.793\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = mins_df, aes(x = mins)) +\ngeom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\ntheme_minimal() +\nlabs(x = \"Observed Sample Mins\",\ntitle = paste(\"Sampling Distribution of the \\nSample Min when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-7.png){width=672}\n:::\n\n```{.r .cell-code}\nmins_df |>\nsummarise(min_samp_dist = mean(mins),\nvar_samp_dist = var(mins),\nsd_samp_dist = sd(mins))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  min_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1         0.648        0.0110        0.105\n```\n\n\n:::\n\n```{.r .cell-code}\n## Max for Beta\nlibrary(tidyverse)\n\nn <- 5 # sample size\nalpha <- 8\nbeta <- 2\nmu <- (alpha / (alpha+beta))\nsigma <- sqrt((alpha * beta)/((alpha+beta)^2 * (alpha+beta+1)))\ngenerate_samp_max <- function(mu, sigma, n) {single_sample <- rbeta(n, alpha, beta)\nsample_max <- max(single_sample)\nreturn(sample_max)\n}\n## test function once:\ngenerate_samp_max(mu = mu, sigma = sigma, n = n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9354073\n```\n\n\n:::\n\n```{.r .cell-code}\nnsim <- 5000 # number of simulations\n## code to map through the function.\n## the \\(i) syntax says to just repeat the generate_samp_mean function\n## nsim times\nmaxs <- map_dbl(1:nsim, \\(i) generate_samp_max(mu = mu, sigma = sigma, n = n))\n## print some of the 5000 mins\n## each number represents the sample min from __one__ sample.\nmaxs_df <- tibble(mins)\nmaxs_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,000 × 1\n    mins\n   <dbl>\n 1 0.575\n 2 0.547\n 3 0.555\n 4 0.667\n 5 0.690\n 6 0.731\n 7 0.625\n 8 0.574\n 9 0.654\n10 0.793\n# ℹ 4,990 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nggplot(data = maxs_df, aes(x = maxs)) +\ngeom_histogram(colour = \"deeppink4\", fill = \"deeppink1\", bins = 20) +\ntheme_minimal() +\nlabs(x = \"Observed Sample Maxs\",\ntitle = paste(\"Sampling Distribution of the \\nSample Max when n =\", n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-8.png){width=672}\n:::\n\n```{.r .cell-code}\nmaxs_df |>\nsummarise(max_samp_dist = mean(maxs),\nvar_samp_dist = var(maxs),\nsd_samp_dist = sd(maxs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  max_samp_dist var_samp_dist sd_samp_dist\n          <dbl>         <dbl>        <dbl>\n1         0.922       0.00207       0.0455\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n## CODE FOR POPULATION GRAPHS\n## create population graphs\n\nnorm_df <- tibble(x = seq(3, 17, length.out = 1000),\n                  dens = dnorm(x, mean = 10, sd = 2),\n                  pop = \"normal(10, 4)\")\nunif_df <- tibble(x = seq(7, 13, length.out = 1000),\n                  dens = dunif(x, 7, 13),\n                  pop = \"uniform(7, 13)\")\nexp_df <- tibble(x = seq(0, 10, length.out = 1000),\n                 dens = dexp(x, 0.5),\n                 pop = \"exp(0.5)\")\nbeta_df <- tibble(x = seq(0, 1, length.out = 1000),\n                  dens = dbeta(x, 8, 2),\n                  pop = \"beta(8, 2)\")\n\npop_plot <- bind_rows(norm_df, unif_df, exp_df, beta_df) |>\n  mutate(pop = fct_relevel(pop, c(\"normal(10, 4)\", \"uniform(7, 13)\",\n                                  \"exp(0.5)\", \"beta(8, 2)\")))\n\nggplot(data = pop_plot, aes(x = x, y = dens)) +\n  geom_line() +\n  theme_minimal() +\n  facet_wrap(~ pop, nrow = 1, scales = \"free\") +\n  labs(title = \"Population Distributions for Each Simulation Setting\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-9.png){width=672}\n:::\n:::\n\n\n\n|   | $\\text{N}(\\mu = 10, \\sigma^2 = 4)$ | $\\text{Unif}(\\theta_1 = 7, \\theta_2 = 13)$ | $\\text{Exp}(\\lambda = 0.5)$ | $\\text{Beta}(\\alpha = 8, \\beta = 2)$ |\n|:------------:|:--------------:|:------------:|:------------:|:------------:|\n| $\\text{E}(Y_{min})$ | 7.67 | 7.98 | 0.41 | 0.65 |\n| $\\text{E}(Y_{max})$ | 12.31 | 11.99 | 4.54 | 0.92 |\n|  |  |  |  |  |\n| $\\text{SE}(Y_{min})$ | 1.34 | 0.82 | 0.41 | 0.11 |\n| $\\text{SE}(Y_{max})$ | 1.34 | 0.84 | 2.39 | 0.05 |\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"Question 2\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Question 2\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\nn <- 5  # Sample size\nlambda <- 0.5  # Rate parameter for Exponential distribution\nx <- seq(0, 3, length.out = 1000)\n# Ymin PDF\ndensity_Ymin <- n * lambda * exp(-n * lambda * x)\n# Ymax PDF\ndensity_Ymax <- n * (1 - exp(-lambda * x))^(n-1) * lambda * exp(-lambda * x)\n\nsamp_min_df <- tibble(x, density_Ymin)\nsamp_max_df <- tibble(x, density_Ymax)\n\nggplot(data = samp_min_df, aes(x = x, y = density_Ymin)) +\n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = samp_max_df, aes(x = x, y = density_Ymax)) +\n  geom_line() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}